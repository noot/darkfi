searchState.loadedDescShard("darkfi_sdk", 0, "Blockchain structures\nCrypto-related definitions\nDarkTree structures\nContract deployment utilities\nError handling\nHex encoding/decoding from bytes\nLogging infrastructure\nPrint a message to the log\nTransaction structure\nConvenience utilities\nWASM API functions\nAuxiliary function to calculate provided block height …\nAuxiliary function to calculate provided block height …\nAuxiliary function to calculate provided block height …\nBlinding factors\nCryptographic constants\nContract ID definitions and methods\nDiffie-Hellman techniques\nElliptic curve VRF (Verifiable Random Function) …\nFunction ID definitions and methods\nKeypairs, secret keys, and public keys\nMerkle node definitions\nMiMC VDF …\nNote encryption\nConvenience module to import all the pasta traits. You …\nPedersen commitment utilities\nSchnorr signature traits\nSparse Merkle Tree implementation This file provides a …\nMiscellaneous utilities\nBlinding factor used in bullas. Every bulla should contain …\nReturns the argument unchanged.\nTries to create a <code>BaseBlind</code> object from a base58 encoded …\nTries to create a <code>ScalarBlind</code> object from a base58 encoded …\nCalls <code>U::from(self)</code>.\nDomain prefix used for block hashes, with <code>hash_to_curve</code>.\nDomain prefix used for Schnorr signatures, with …\nDomain prefix used for Schnorr signatures, with …\n$\\ell^\\mathsf{Orchard}_\\mathsf{base}$\n$\\ell^\\mathsf{Orchard}_\\mathsf{scalar}$\n$\\ell_\\mathsf{value}$\nWIF checksum length\nOrchard fixed bases.\nSinsemilla generators\nSWU hash-to-curve personalization for the IVK commitment …\nConstBaseFieldElement is used in scalar mul with a base …\nWindow size for fixed-base scalar multiplication\n$2^{<code>FIXED_BASE_WINDOW_SIZE</code>}$\nSWU hash-to-curve personalization for the note commitment …\nNumber of windows for a full-width scalar\nNumber of windows for a short signed scalar\nNullifierK is used in scalar mul with a base field element.\nSWU hash-to-curve personalization for the spending key …\nThe Orchard fixed bases used in scalar mul with full-width …\nSWU hash-to-curve personalization for the value commitment …\nSWU hash-to-curve value for the value commitment generator\nSWU hash-to-curve value for the value commitment generator\nValueCommitV is used in scalar mul with a short signed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerator used in SinsemillaCommit randomness for IVK …\nFull-width u-values for GENERATOR\nFull-width z-values for GENERATOR\nGenerator used in SinsemillaCommit randomness for note …\nFull-width u-values for GENERATOR\nFull-width z-values for GENERATOR\nFull-width u-values for GENERATOR\nFull-width z-values for GENERATOR\nThe value commitment is used to check balance between …\nFull-width u-values for GENERATOR\nFull-width z-values for GENERATOR\nThe value commitment is used to check balance between …\nFull-width u-values for GENERATOR\nFull-width z-values for GENERATOR\nThe value commitment is used to check balance between …\nShort signed u-values for GENERATOR\nShort signed z-values for GENERATOR\nThe largest integer such that $2^c \\leq (r_P - 1) / 2$, …\n$\\frac{1}{2^K}$\nNumber of bits of each message piece in …\n$\\ell^\\mathsf{Orchard}_\\mathsf{Merkle}$\nSWU hash-to-curve personalization for the Merkle CRH …\nGenerator used in SinsemillaHashToPoint for IVK commitment\nGenerator used in SinsemillaHashToPoint for Merkle …\nGenerator used in SinsemillaHashToPoint for note commitment\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe sequence of K bits in little-endian order representing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes in an FnMut closure and returns a constant-length …\nThe sequence of bits representing a u64 in little-endian …\nDerivation prefix for <code>ContractId</code>\nContractId represents an on-chain identifier for a certain …\nContract ID for the native DAO contract\nContract ID for the native Deployooor contract\nContract ID for the native money contract\nDerives a <code>ContractId</code> from a <code>SecretKey</code> (deploy key)\nDerive a contract ID from a <code>PublicKey</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>ContractId</code> object from given bytes.\n<code>blake3(self || tree_name)</code> is used in databases to have a …\nGet the inner <code>pallas::Base</code> element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>ContractId</code> object to its byte representation\nSapling KDF for note encryption.\nSapling key agreement for note encryption. Implements …\nPrefix domain used for <code>hash_to_curve</code> calls\nVRF Proof\nReturns the argument unchanged.\nReturns the VRF output. <strong>It is necessary</strong> to do …\nCalls <code>U::from(self)</code>.\nExecute the VRF function and create a proof given a …\nVerify a <code>VrfProof</code> given a <code>Publickey</code> and a seed input …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeypair structure holding a <code>SecretKey</code> and its respective …\nStructure holding a public key, wrapping a <code>pallas::Point</code> …\nStructure holding a secret key, wrapping a <code>pallas::Base</code> …\nDefault Keypair used in genesis block generation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a <code>SecretKey</code> given 32 bytes. Returns an error …\nInstantiate a <code>PublicKey</code> given 32 bytes. Returns an error …\nDerive a new <code>PublicKey</code> object given a <code>SecretKey</code>\nTries to create a <code>SecretKey</code> object from a base58 encoded …\nTries to create a <code>PublicKey</code> object from a base58 encoded …\nGet the inner object wrapped by <code>SecretKey</code>\nGet the inner object wrapped by <code>PublicKey</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new <code>Keypair</code> given a <code>SecretKey</code>\nGenerate a new <code>Keypair</code> object given a source of randomness\nGenerate a new <code>SecretKey</code> given a source of randomness\nDowncast the <code>PublicKey</code> to 32 bytes of <code>pallas::Point</code>\nFetch the <code>x</code> coordinate of this <code>PublicKey</code>\nFetch the <code>x</code> and <code>y</code> coordinates of this <code>PublicKey</code> as a tuple\nFetch the <code>y</code> coordinate of this <code>PublicKey</code>\nThe <code>MerkleNode</code> is represented as a base field element.\nImplements <code>MerkleCRH^Orchard</code> as defined in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create a <code>MerkleNode</code> type from the given 32 bytes. …\nTries to decode a base58 string into a <code>MerkleNode</code> type. …\nReference the raw inner base field element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>MerkleNode</code> type into 32 raw bytes\nAn exponent to perform inverse of x^3 on prime field based …\nModulus of prime field 2^256 - 2^32 * 351 + 1\nExecutes <code>num_steps</code> of MiMC-calculation in backward …\nCalculates set of round constants to perform …\nPerforms an Eval() step of the MiMC-based VDF\nExecutes <code>num_steps</code> of MiMC-calculation in forward …\nPerforms a Verify() step for the MiMC-based VDF result\nAEAD tag length in bytes\nAn encrypted note using Diffie-Hellman and ChaCha20Poly1305\nAn encrypted note using an ElGamal scheme verifiable in ZK.\nDecrypt the <code>ElGamalEncryptedNote</code> using a <code>SecretKey</code> for …\nEncrypt given values to the given <code>PublicKey</code> using a …\nThe values encrypted with the derived shared secret using …\nThe ephemeral public key used for Diffie-Hellman key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe affine version of the curve\nThe affine representation for this elliptic curve.\nThe base field over which this elliptic curve is …\nThe base field over which this elliptic curve is …\nHow many bits of information can be reliably stored in the …\nCURVE_ID used for hash-to-curve.\nEfficient representation of an elliptic curve point …\nThis trait is the affine counterpart to <code>Curve</code> and is used …\nThis trait is a common interface for dealing with elements …\nThe projective form of the curve\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nTrait for constructing a <code>PrimeField</code> element from a …\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nAffine representation of an elliptic curve point …\nThis represents an element of a non-binary prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalars modulo the order of this group’s scalar field.\nThe scalar field of this elliptic curve.\nThe scalar field of this elliptic curve.\nInverse of $2$ in the field.\nThe zero element of the field, the additive identity.\nReturns the curve constant a.\nReturns the curve constant $a$.\nReturns the curve constant b.\nReturns the curve constant $b$.\nConverts a batch of projective elements into affine …\nGets the coordinates of this point.\nCubes this element.\nDoubles this element.\nDoubles this element.\nApply the curve endomorphism by multiplying the …\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nObtains a point given $(x, y)$, failing if it is not on the\nReturns a fixed generator of unknown exponent.\nReturns a fixed generator of the prime-order subgroup.\nRequests a hasher that accepts messages and returns …\nReturns the additive identity.\nReturns the additive identity, also known as the “…\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nDetermines if this point represents the point at infinity; …\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nReturns whether or not this element is on the curve; should\nReturns whether or not this element is on the curve; should\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nReturn the Jacobian coordinates of this point.\nObtains a point given Jacobian coordinates $X : Y : Z$, …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts this element into its affine representation.\nConverts this element to its curve representation.\nConverts an element of the prime field into the standard …\nPedersen commitment for a full-width base field element.\nPedersen commitment for a 64-bit value, in the base field.\nTrait for public keys that implements a signature …\nTrait for secret keys that implements a signature creation\nSchnorr signature with a commit and response\nReturn a dummy identity <code>Signature</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSign a given message\nVerify a given message is valid given a signature.\nAn in-memory storage, useful for unit tests and smaller …\nThe path contains a sequence of sibling nodes that make up …\nThe Sparse Merkle Tree struct.\nPluggable storage backend for the SMT. Has a minimal …\nAn array of empty hashes hashed with themselves <code>N</code> times.\nAn array of empty hashes hashed with themselves <code>N</code> times.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA function to generate empty hashes with a given …\nFast lookup for leaf. The SMT can be used as a generic …\nThe hasher used to build the Merkle tree.\nThe hasher used to build the Merkle tree.\nTakes a batch of field elements, inserts these hashes into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new SMT\nPath from leaf to root. It is a list of sibling nodes. It …\nPath from leaf to root. It is a list of sibling nodes. It …\nGive the path leading from the leaf at <code>index</code> up to the …\nRecomputes the Merkle tree depth first from the bottom of …\nReturns the Merkle tree root.\nA map from leaf indices to leaf data stored as field …\nA map from leaf indices to leaf data stored as field …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true iff the given index represents a left child.\nConverts a leaf position to the internal BigUint index for …\nReturns the index of the left child, given an index.\nReturns the log2 value of the given number. Used for …\nReturns the index of the parent, given an index.\nReturns the index of the right child, given an index.\nReturns the index of the sibling, given an index.\nAn array of empty hashes hashed with themselves <code>N</code> times.\nReturns the argument unchanged.\nThe hasher used to build the Merkle tree.\nCalls <code>U::from(self)</code>.\nA map from leaf indices to leaf data stored as field …\nConverts from pallas::Base to pallas::Scalar (aka $x …\nConverts from pallas::Scalar to pallas::Base (aka $x …\nHash a slice of values together with a prefix <code>persona</code> …\nHash a slice of values together with a prefix <code>persona</code> …\nWrapper around poseidon in <code>halo2_gadgets</code>\nThis struct represents a Forest of <code>DarkTree</code>. It is advised …\nThis struct represents the information hold by a …\nThis struct represents a Tree using DFS post-order …\nSpecial iterator of a <code>DarkTree</code>, performing DFS post-order …\nImmutable iterator of a <code>DarkTree</code>, performing DFS post-order\nMutable iterator of a <code>DarkTree</code>, performing DFS post-order …\nThis struct represents a Leaf of a <code>DarkTree</code>, holding this …\nAppend a new child node to the <code>DarkTree</code>, if max capacity …\nAppend a new <code>DarkTree</code> to the <code>DarkForest</code>, if max capacity …\nBuild the <code>DarkTree</code> indexes and perform an integrity check …\nBuild each individual <code>DarkTree</code> indexes and be used after …\nBuild the <code>DarkTree</code> using .build() and then produce a …\nBuild each individual <code>DarkTree</code> using .build() and then …\nCheck <code>DarkLeaf</code> children indexes validity\nCheck if configured max capacity have been exceeded.\nCheck if configured max capacity have been exceeded.\nCheck if configured min capacity have not been exceeded.\nCheck if configured min capacity have not been exceeded.\nVerify <code>DarkTree</code>’s leaf parent and children indexes …\nVector containing all tree’s branches(children tree)\nVector of indexes showcasing this leaf’s children …\nAuxiliary function to verify provided <code>DarkLeaf</code> slice, …\nAuxiliary function to verify provided <code>DarkLeaf</code> slice is …\nData holded by this leaf\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSetup <code>DarkTree</code>’s leafs indexes, based on DFS post-order …\nSetup each individual <code>DarkTree</code>’s leafs indexes.\nIndex showcasing this leaf’s position, when all leafs …\nLeaf’s data, along with its parent and children indexes …\nVerify current <code>DarkTree</code>’s leafs indexes validity, based …\nVerify each individual <code>DarkTree</code>’s leafs indexes validity,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutably iterate through the tree, using DFS post-order …\nMutably iterate through the tree, using DFS post-order …\nThis tree’s leaf information, along with its data\nReturn the count of all <code>DarkTree</code> leafs.\nReturn the count of all <code>DarkForest</code> leafs.\nOptional max capacity of the tree, including all children …\nOptional max capacity of the forest, including all tree …\nMin capacity of the tree, including all children nodes …\nOptional min capacity of the forest, including all tree …\nEvery <code>DarkTreeLeaf</code> is initiated using default indexes.\nInitialize a <code>DarkTree</code>, using provided data to generate its …\nInitialize a <code>DarkTree</code>, using provided data to generate its …\nGrab next item iterator visits and return its immutable …\nGrab next item iterator visits and return its mutable …\nMove next item iterator visits from the tree to the …\nIndex showcasing this leaf’s parent tree, when all leafs …\nSet <code>DarkTreeLeaf</code>’s children index\nSet <code>DarkTreeLeaf</code>’s index\nSet <code>DarkTree</code>’s leaf parent and children indexes, and …\nSet <code>DarkTreeLeaf</code>’s parent index\nVector containing all forest’s trees\nParameters for <code>Deploy::Deploy</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialized deployment payload instruction\nPublic key used to sign the transaction and derive the …\nWebassembly bincode of the smart contract\nError codes available in the contract.\nAllows on-chain programs to implement contract-specific …\nGeneral DarkTree related errors.\nMain result type used by DarkTree.\nContains the error value\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuiltin return values occupy the upper 32 bits\nDecode hex string into bytes\nReturns the argument unchanged.\nCreates a hex formatted string of the data\nCalls <code>U::from(self)</code>.\nA ContractCall is the part of a transaction that executes …\nID of the contract invoked\nCall data passed to the contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtra methods for Iterator. Copied from itertools.\n<code>.try_collect()</code> is more convenient way of writing …\nDatabase functions\nEntrypoint used for the wasm binaries\nMerkle\nUtility functions\nEveryone can call this. Checks if a key is contained in …\nOnly update() can call this. Removes a key from the db.\nEveryone can call this. Will read a key from the key-value …\nCreate a new database instance for the given contract. …\nEveryone can call this. Assumes that the database already …\nOnly update() can call this. Set a value within the …\nOnly deploy() can call this.\nSuccess exit code for a contract\nDeserialize a given payload in <code>entrypoint</code> The return …\nAdd given elements into a Merkle tree. Used for inclusion …\nAdd given elements into a sparse Merkle tree. Used for …\nEveryone can call this. Will return current blockchain …\nOnly deploy(), metadata() and exec() can call this. Will …\nOnly exec() can call this. Will return last block height.\nInternal function, get raw bytes from the objects store\nInternal function, get bytes size for an object in the …\nOnly metadata() and exec() can call this. Will return …\nOnly deploy(), metadata() and exec() can call this. Will …\nOnly metadata() and exec() can call this. Will return …\nEveryone can call this. Will return runtime configured …\nAuxiliary function to parse db_get return value. If either …\nCalls the <code>set_return_data</code> WASM function. Returns Ok(()) on …")