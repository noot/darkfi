searchState.loadedDescShard("drk", 0, "Create a Token alias\nManage Token aliases\nShow the balance of a DAO\nRead a transaction from stdin and broadcast it\nGenerate a SHELL completion script and print to stdout\nContract functionalities\nCreate DAO parameters\nDAO functionalities\nDeploy a smart contract\nCLI-util structure\nExecute a DAO proposal\nExplorer related subcommands\nFetch a blockchain transaction by hash\nFreeze a token mint\nGenerate a new deploy authority\nGenerate a new mint authority\nImport DAO data from stdin\nImport a mint authority\nInitialize the first half of the atomic swap\nInspect a transaction from stdin\nInspect a swap half or the full swap tx from stdin\nBuild entire swap tx given the first half from stdin\nFun\nList imported DAOs (or info about a specific one)\nList token IDs with available mint authorities\nList deploy authorities in the wallet\nLock a smart contract\nMint an imported DAO on-chain\nMint tokens\nOTC atomic swap\nSend a ping request to the darkfid RPC endpoint\nView a DAO proposal data\nList DAO proposals\nCreate a proposal for a DAO\nRemove a Token alias\nScan the blockchain and parse relevant transactions\nPrint alias info of optional arguments. If no argument is …\nSign a transaction given from stdin as the first-half\nAuxiliary structure used to keep track of signals\nRead a transaction from stdin and simulate it\nRead a transaction from stdin and mark its input coins as …\nThis subscription will listen for incoming blocks from …\nToken functionalities\nCreate a payment transaction\nFetch broadcasted transactions history\nUnspend a coin\nView DAO data from stdin\nVote on a given proposal\nWallet operations\nCreate an alias record for provided Token ID.\nFetch all pukeys from the wallet.\nCreate and append a <code>Money::Fee</code> call to a given <code>Transaction</code>.\nAppend data related to DAO contract transactions into the …\nAppend data related to Money contract transactions into …\nBroadcast a given transaction to darkfid and forward onto …\nCLI utility functions\nSub command to execute\nConfiguration file to use\nConfirm already imported DAO metadata into the wallet. …\nCustom implementation of rusqlite::named_params! to use …\nWallet functionality related to Dao\nFetch known unspent balances from the wallet for the given …\nImport given DAO votes into the wallet This function is …\nList DAO(s) imported in the wallet. If an ID is given, …\nRetrieve DAO for provided ID and print its metadata.\nMint a DAO on-chain\nCreate a DAO proposal\nVote on a DAO proposal\nFetch default pubkey from the wallet.\nFetch default secret key from the wallet.\nWallet functionality related to Deployooor\nGenerate a new deploy authority keypair and place it into …\nCreate a contract deployment transaction\nAuxiliary function to derive <code>TokenAttributes</code> for provided …\ndarkfid JSON-RPC endpoint\nError codes\nCreate a token freeze transaction. Returns the transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch all aliases from the wallet. Optionally filter using …\nFetch all aliases from the wallet, mapped by token id.\nFetch all coins and their metadata related to the Money …\nFetch a DAO given a numeric ID.\nConvenience function. Interprets the alias either as the …\nRetrieve DAO ID using provided alias filter.\nFetch a DAO proposal by its ID\nFetch all known DAO proposals from the wallet given a DAO …\nFetch all DAO secret keys from the wallet.\nFetch DAO Merkle trees from the wallet.\nFetch all known DAOs from the wallet.\nRetrieve a deploy authority keypair given an index\nFetch all secret keys from the wallet.\nFetch the Money Merkle tree from the wallet.\nRetrieve token by provided string. Input string represents …\nFetch provided token unspend balances from the wallet.\nQueries darkfid for a tx with given hash.\nQueries darkfid for given transaction’s gas.\nGet a transaction history record.\nFetch all transactions history records, excluding bytes …\nSignals handle\nAuxiliary task to handle SIGHUP, SIGTERM, SIGINT and …\nImport given DAO params into the wallet with a given name.\nImport a token mint authority into the wallet.\nImport given secret keys into the wallet. If the key …\nInitialize the first half of an atomic swap\nInitialize wallet with tables for the DAO contract.\nInitialize wallet with tables for the Deployooor contract.\nInitialize wallet with tables for the Money contract.\nInitialize wallet with tables for drk\nInsert a <code>Transaction</code> history record into the wallet.\nInsert a slice of <code>Transaction</code> history records into the …\nInspect and verify a given swap (half or full) transaction\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a full transaction by inspecting and verifying …\nGet the last scanned block height from the wallet.\nList contract deploy authorities from the wallet\nCreate a contract redeployment lock transaction\nSet log file to ouput into\nTry to fetch zkas bincodes for the given <code>ContractId</code>.\nMark a coin in the wallet as spent\nMarks all coins in the wallet as spent, if their nullifier …\nMark provided transaction input coins as spent.\nCreate a token mint transaction. Returns the transaction …\nWallet functionality related to Money\nFetch known unspent balances from the wallet and return …\nGenerate a new keypair and place it into the wallet.\nAuxiliary function to  grab all the nullifiers, coins, …\nAuxiliary function to parse a <code>MONEY_COINS_TABLE</code> record. …\nAuxiliary function to parse a proposal record row.\nAuxiliary function to ping configured darkfid daemon for …\nImport given DAO proposals into the wallet.\nReplace the DAO Merkle trees in the wallet.\nImport given DAO votes into the wallet.\nReplace the Money Merkle tree in the wallet.\nRemove provided alias record from the wallet database.\nReset all DAO proposals in the wallet.\nReset the DAO Merkle trees in the wallet.\nReset all DAO votes in the wallet.\nReset confirmed DAOs in the wallet.\nReset the Money coins in the wallet\nReset the Money Merkle tree in the wallet\ndarkfid JSON-RPC related methods\nJSON-RPC client to execute requests to darkfid daemon\n<code>scan_block</code> will go over over transactions in a block and …\nScans the blockchain starting from the last scanned block, …\nSet provided index address as default in the wallet.\nSIGHUP subscriber to retrieve new configuration,\nSign a given transaction by retrieving the secret key from …\nSimulate the transaction with the state machine.\nSubscribes to darkfid’s JSON-RPC notification endpoint …\nSwap methods\nTermination signal channel receiver\nToken methods\nPayment methods\nCreate a payment transaction. Returns the transaction …\nWallet functionality related to transactions history\nUnconfirm imported DAOs by removing the leaf position, …\nMark a given coin in the wallet as unspent.\nUpdate all transaction history records statuses to the …\nUpdate given transactions history record statuses to the …\nIncrease verbosity (-vvv supported)\nHandler waits for termination signal\nWallet database operations handler\nPassword for the wallet database\nPath to wallet database\nWallet database operations handler\nToken alias\nToken alias to search for\nToken alias to remove\nToken to create alias for\nToken to search alias for\nContract ID (deploy authority)\nContract ID (deploy authority)\nPath to serialized deploy instruction\nPath to contract wasm bincode\nAmount to send from DAO with proposal success\nThe ratio of winning votes/total votes needed for a …\nNumeric identifier for the DAO (optional)\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nName or numeric identifier for the DAO\nNamed identifier for the DAO\nDAO’s governance token ID\nNumeric identifier for the proposal\nNumeric identifier for the proposal\nNumeric identifier for the proposal\nThe minimum amount of governance tokens needed to open a …\nMinimal threshold of participating total tokens needed for …\nPubkey to send tokens to with proposal success\nToken ID to send from DAO with proposal success\nVote (0 for NO, 1 for YES)\nVote weight (amount of governance tokens)\nEncode transaction to base58\nEncode specific history record transaction to base58\nPrint the full transaction information\nTransaction hash\nFetch specific history record (optional)\nToken pair to send:recv (f00:b4r)\nValue pair to send:recv (11.55:99.42)\nGet the default address in the wallet\nPrint all the addresses in the wallet\nAmount to send\nQuery the wallet for known balances\nReset Merkle tree to checkpoint index and start scanning\nbase58-encoded coin to mark as unspent\nPrint all the coins in the wallet\nSub command to execute\nSub command to execute\nSub command to execute\nSub command to execute\nSub command to execute\nSub command to execute\nSet the default address in the wallet\nImport secret keys from stdin into the wallet, separated …\nInitialize wallet database\nGenerate a new keypair in the wallet\nList all available checkpoints\nRecipient address\nReset Merkle tree and start scanning from first block\nPrint all the secret keys from the wallet\nThe Shell you want to generate script for\nToken ID to send\nPrint the Merkle tree in the wallet\nAmount to mint\nRecipient of the minted tokens\nMint authority secret key\nToken ID to mint\nToken ID to freeze\nMint authority token blind\nAuxiliary function to generate provided shell completions.\nFun police go away\nAuxiliary function to parse provided string into a tokens …\nAuxiliary function to parse a base64 encoded transaction …\nAuxiliary function to parse provided string into a values …\nParameters representing an intialized DAO, optionally …\nParameters representing a DAO to be initialized\nParameters representing an initialized DAO proposal, …\nParameters representing a vote we’ve made on a DAO …\nBlinding facfor of all votes\nValue of all votes\nAmount of this proposal\nThe ratio of winning/total votes needed for a proposal to …\nThe ratio of winning/total votes needed for a proposal to …\nDAO bulla blind\nDAO bulla blind\nProposal’s bulla blind\nThe call index in the transaction where the DAO was …\ncall index in the transaction where this proposal was …\ncall index in the transaction where this vote was casted\nThe DAO bulla related to this proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDAO’s governance token ID\nDAO’s governance token ID\nNumeric identifier for the DAO\nNumeric identifier for the proposal\nNumeric identifier for the vote\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaf position of the DAO in the Merkle tree of DAOs\nLeaf position of this proposal in the Merkle tree of …\nSnapshotted Money Merkle tree\nNamed identifier for the DAO\nNumeric identifier for the proposal related to this vote\nThe minimum amount of governance tokens needed to open a …\nThe minimum amount of governance tokens needed to open a …\nMinimal threshold of participating total tokens needed for …\nMinimal threshold of participating total tokens needed for …\nRecipient of this proposal’s funds\nSecret key for the DAO\nSecret key for the DAO\nToken ID to be sent\nThe transaction hash where the DAO was deployed\nTransaction hash where this proposal was proposed\nTransaction hash where this vote was casted\nThe vote ID we’ve voted on this proposal\nThe vote\nBlinding factor for the yes vote\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nCustom wallet database errors available for drk. Please …\nResult type used in the wallet database module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHalf of the swap data, includes the coin that is supposed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStructure representing base wallet database operations.\nConnection to the SQLite database\nThis function executes a given SQL query that contains …\nThis function executes a given SQL query, but isn’t able …\nReturns the argument unchanged.\nGenerate a <code>SELECT</code> query for provided table from selected …\nCalls <code>U::from(self)</code>.\nCreate a new wallet database handler. If <code>path</code> is <code>None</code>, …\nQuery provided table from selected column names and …\nQuery provided table from selected column names and …")