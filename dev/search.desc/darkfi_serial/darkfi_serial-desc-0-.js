searchState.loadedDescShard("darkfi_serial", 0, "Data which can asynchronously be decoded in a …\nData which can asynchronously be encoded in a …\nRead bytes asynchronously.\nExtensions of <code>AsyncRead</code> to decode data as per Bitcoin …\nWrite bytes asynchronously.\nExtensions of <code>AsyncWrite</code> to encode data as per Bitcoin …\nData which can be decoded in a consensus-consistent way.\nData which can be encoded in a consensus-consistent way.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtensions of <code>Read</code> to decode data as per Bitcoin consensus.\nVariable-integer encoding. Integer can be encoded …\nExtensions of <code>Write</code> to encode data as per Bitcoin …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nDeserialize an object from a vector. Will error if said …\nAsynchronously deserialize an object from a vector. Will …\nAsynchronously deserialize an object from a vector, but do …\nDeserialize an object from a vector, but do not error if …\nEncode an object with a well-defined format. Should only …\nAsynchronously encode an object with a well-defined format.\nEncode a dynamic set of arguments to a buffer.\nAsynchronously encode a dynamic set of arguments to a …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the length of this <code>VarInt</code> when encoded. Returns:\nAttempt to close the object.\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReads some bytes from the byte stream.\nRead a boolean\nRead a boolean\nReads the exact number of bytes required to fill <code>buf</code>.\nRead a 32-bit floating point int\nRead a 32-bit floating point int\nRead a 64-bit floating point int\nRead a 64-bit floating point int\nRead a 128-bit signed int\nRead a 128-bit signed int\nRead a 16-bit signed int\nRead a 16-bit signed int\nOuptut a 32-bit signed int\nOuptut a 32-bit signed int\nRead a 64-bit signed int\nRead a 64-bit signed int\nRead an 8-bit signed int\nRead an 8-bit signed int\nRead a byte slice\nRead a byte slice\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nRead a 128-bit unsigned int\nRead a 128-bit unsigned int\nRead a 16-bit unsigned int\nRead a 16-bit unsigned int\nRead a 32-bit unsigned int\nRead a 32-bit unsigned int\nRead a 64-bit unsigned int\nRead a 64-bit unsigned int\nRead an 8-bit unsigned int\nRead an 8-bit unsigned int\nLike <code>read()</code>, except it reads into a slice of buffers.\nEncode an object into a vector.\nAsynchronously encode an object into a vector.\nCreates an adapter which will read at most <code>limit</code> bytes …\nEncodings for external crates\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nOutput a boolean\nOutput a boolean\nOutput a 32-bit floating point int\nOutput a 32-bit floating point int\nOutput a 64-bit floating point int\nOutput a 64-bit floating point int\nOutput a 128-bit signed int\nOutput a 128-bit signed int\nOutput a 16-bit signed int\nOutput a 16-bit signed int\nOuptut a 32-bit signed int\nOuptut a 32-bit signed int\nOutput a 64-bit signed int\nOutput a 64-bit signed int\nOutput an 8-bit signed int\nOutput an 8-bit signed int\nOutput a byte slice\nOutput a byte slice\nOutput a 128-bit unsigned int\nOutput a 128-bit unsigned int\nOutput a 16-bit unsigned int\nOutput a 16-bit unsigned int\nOutput a 32-bit unsigned int\nOutput a 32-bit unsigned int\nOutput a 64-bit unsigned int\nOutput a 64-bit unsigned int\nOutput an 8-bit unsigned int\nOutput an 8-bit unsigned int\nLike <code>write()</code>, except that it writes a slice of buffers.\nData which can asynchronously be decoded in a …\nData which can asynchronously be encoded in a …\nRead bytes asynchronously.\nExtensions of <code>AsyncRead</code> to decode data as per Bitcoin …\nWrite bytes asynchronously.\nExtensions of <code>AsyncWrite</code> to encode data as per Bitcoin …\nGives an in-memory buffer a cursor for reading and writing.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nAsynchronously deserialize an object from a vector. Will …\nAsynchronously deserialize an object from a vector, but do …\nAsynchronously encode an object with a well-defined format.\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nGets a mutable reference to the underlying buffer.\nGets a reference to the underlying buffer.\nCalls <code>U::from(self)</code>.\nUnwraps the cursor, returning the underlying buffer.\nCreates a cursor for an in-memory buffer.\nAttempt to close the object.\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReads some bytes from the byte stream.\nRead a boolean\nReads the exact number of bytes required to fill <code>buf</code>.\nRead a 32-bit floating point int\nRead a 64-bit floating point int\nRead a 128-bit signed int\nRead a 16-bit signed int\nOuptut a 32-bit signed int\nRead a 64-bit signed int\nRead an 8-bit signed int\nRead a byte slice\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nRead a 128-bit unsigned int\nRead a 16-bit unsigned int\nRead a 32-bit unsigned int\nRead a 64-bit unsigned int\nRead an 8-bit unsigned int\nLike <code>read()</code>, except it reads into a slice of buffers.\nAsynchronously encode an object into a vector.\nSets the position of this cursor.\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nOutput a boolean\nOutput a 32-bit floating point int\nOutput a 64-bit floating point int\nOutput a 128-bit signed int\nOutput a 16-bit signed int\nOuptut a 32-bit signed int\nOutput a 64-bit signed int\nOutput an 8-bit signed int\nOutput a byte slice\nOutput a 128-bit unsigned int\nOutput a 16-bit unsigned int\nOutput a 32-bit unsigned int\nOutput a 64-bit unsigned int\nOutput an 8-bit unsigned int\nLike <code>write()</code>, except that it writes a slice of buffers.\nSerialization of collections\nImplementations for pasta curves")