searchState.loadedDescShard("darkfi_deployooor_contract", 0, "Smart contract implementing non-native smart contract …\nFunctions available in the contract\nClient API for interaction with this smart contract This …\nContract errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCall parameters definitions\n<code>Deployooor::DeployV1</code> API\n<code>Deployooor::LockV1</code> API\nStruct holding necessary information to build a …\nSerialized deployment payload instruction\nContract deploy keypair\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWASM bincode to deploy\nStruct holding necessary information to build a …\nContract deploy keypair\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState update for <code>Deploy::Deploy</code>\nParameters for <code>Deploy::Lock</code>\nState update for <code>Deploy::Lock</code>\nThe <code>ContractId</code> to deploy\nThe <code>ContractId</code> to lock\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key used to sign the transaction and derive the …")