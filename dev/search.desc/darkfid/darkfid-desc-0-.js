searchState.loadedDescShard("darkfid", 0, "Defines a blockchain network configuration. Default values …\nDaemon structure\nNote: If you change these don’t forget to remove their …\nStructure to hold a JSON-RPC client and its config, so we …\nAuxiliary structure used to keep track of signals\nOptional sync checkpoint hash\nOptional sync checkpoint height\nConfiguration file to use\nPath to blockchain database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSignals handle\nAuxiliary task to handle SIGHUP, SIGTERM, SIGINT and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet log file to ouput into\nFlag to specify node is a miner\nParticipate in block production\nAuxiliary function to execute a request towards the …\nAuxiliary function to execute a request towards the …\nminerd JSON-RPC endpoint\nP2P network settings\nBlockchain network to use\nP2P network pointer\nPing configured miner daemon JSON-RPC endpoint.\nOptional fixed PoW difficulty, used for testing\nPoW block production target, in seconds\nP2P net protocols\nWallet address to receive mining rewards\nJSON-RPC requests handler and methods\nJSON-RPC client to execute requests to the miner daemon\nJSON-RPC connection tracker\nJSON-RPC listen URL\nSIGHUP subscriber to retrieve new configuration,\nDisable transaction’s fee verification, used for testing\nSkip syncing process and start node right away\nA map of various subscribers exporting live info from the …\nValidator async tasks\nTermination signal channel receiver\nFinalization threshold, denominated by number of blocks\nUtility functions\nValidator(node) pointer\nIncrease verbosity (-vvv supported)\nHandler waits for termination signal\nCustom RPC errors available for darkfid. Please sort them …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommunications timeout\nBlock proposal broadcast protocol\nValidator blockchain sync protocol\nTransaction broadcast protocol\nAuxiliary <code>Proposal</code> wrapper structure used for messaging.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStructure represening a request to ask a node a fork …\nStructure representing the response to <code>ForkSyncRequest</code>, …\nStructure represening a request to ask a node for up to …\nStructure representing the response to <code>HeaderSyncRequest</code>, …\nStructure represening a request to ask a node for up to…\nStructure representing the response to <code>SyncRequest</code>, …\nStructure represening a request to ask a node for their …\nStructure representing the response to <code>TipRequest</code>, …\nResponse blocks\nOptional fork tip block hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical(finalized) tip block hash\nResponse headers\nHeader hashes\nCanonical(finalized) tip block height\nHeader height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse fork proposals\nFlag indicating the node is synced\nCanonical(finalized) tip block hash\nCanonical(finalized) tip block hash\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nasync task used for listening for new blocks and perform …\nAsync task used for purging erroneous pending transactions …\nAuxiliary function to generate next block in an atomic …\nAuxiliary function to generate a Money::PoWReward …\nAsync task to listen for incoming proposals and check if …\nAsync task to generate and mine provided fork index next …\nAsync task to generate and mine provided fork index next …\nAsync task used for participating in the PoW block …\nAsync task to wait for listener’s stop signal.\nAuxiliary function to ask all peers for their current tip …\nAuxiliary function to retrieve blocks of provided headers …\nAuxiliary function to retrieve headers backwards until our …\nAuxiliary function to retrieve best fork state from a …\nasync task used for block syncing. A checkpoint can be …\nAuxiliary function to block until node is connected to at …\nAuxiliary function to parse darkfid configuration file and …\nAuxiliary function to generate the P2P network and …")